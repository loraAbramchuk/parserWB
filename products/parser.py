import requests
import json
import time
import random
from decimal import Decimal
from django.core.management.base import BaseCommand
from django.db import transaction
from .models import Product


class WildberriesParser:
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å Wildberries
    """
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
    
    def search_products(self, query, category=None, limit=100):
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_url = "https://search.wb.ru/exactmatch/ru/common/v4/search"
        
        params = {
            'TestGroup': 'no_test',
            'TestID': 'no_test',
            'appType': '1',
            'curr': 'rub',
            'dest': '-1257786',
            'query': query,
            'resultset': 'catalog',
            'sort': 'popular',
            'spp': '30',
            'suppressSpellcheck': 'false',
        }
        
        if category:
            params['cat'] = category
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        try:
            response = self.session.get(search_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if 'data' not in data or 'products' not in data['data']:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö")
                return []
            
            products = data['data']['products']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            if limit and len(products) > limit:
                products = products[:limit]
                print(f"üìä –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {limit} —Ç–æ–≤–∞—Ä–æ–≤")
            
            return products
            
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return []
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
            return []
    
    def get_product_details(self, product_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        
        Args:
            product_id (int): ID —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            dict: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        """
        detail_url = f"https://card.wb.ru/cards/detail?nm={product_id}"
        
        try:
            response = self.session.get(detail_url)
            response.raise_for_status()
            
            data = response.json()
            
            if 'data' not in data or 'products' not in data['data']:
                return None
            
            return data['data']['products'][0]
            
        except (requests.RequestException, json.JSONDecodeError, IndexError):
            return None
    
    def parse_product(self, product_data, search_query, category=None):
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ API –æ—Ç–≤–µ—Ç–∞
        
        Args:
            product_data (dict): –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API
            search_query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            product_id = product_data.get('id')
            name = product_data.get('name', '')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            price_data = product_data.get('salePriceU', 0)
            price = Decimal(str(price_data)) / 100 if price_data else Decimal('0')
            
            original_price_data = product_data.get('priceU', 0)
            original_price = Decimal(str(original_price_data)) / 100 if original_price_data else Decimal('0')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É –∏ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
            if original_price > price and price > 0:
                main_price = original_price
                discount_price = price
            else:
                main_price = price
                discount_price = None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
            rating_data = product_data.get('rating', 0)
            rating = Decimal(str(rating_data)) if rating_data else None
            
            reviews_count = product_data.get('reviewCount', 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç–æ–≤–∞—Ä–∞
            product_url = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            product_category = category or product_data.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            return {
                'name': name,
                'price': main_price,
                'discount_price': discount_price,
                'rating': rating,
                'reviews_count': reviews_count,
                'category': product_category,
                'search_query': search_query,
                'product_url': product_url,
            }
            
        except (KeyError, ValueError, TypeError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞ {product_data.get('id', 'unknown')}: {e}")
            return None
    
    def save_products(self, products_data):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            products_data (list): –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        saved_count = 0
        
        with transaction.atomic():
            for product_data in products_data:
                if not product_data:
                    continue
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º URL
                    product, created = Product.objects.get_or_create(
                        product_url=product_data['product_url'],
                        defaults=product_data
                    )
                    
                    if created:
                        saved_count += 1
                        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {product_data['name'][:50]}...")
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                        for field, value in product_data.items():
                            setattr(product, field, value)
                        product.save()
                        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {product_data['name'][:50]}...")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                    continue
        
        return saved_count
    
    def parse_and_save(self, query, category=None, limit=100):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Wildberries...")
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category or '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}")
        print(f"üìä –õ–∏–º–∏—Ç: {limit} —Ç–æ–≤–∞—Ä–æ–≤")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = self.search_products(query, category, limit)
        
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        parsed_products = []
        for i, product in enumerate(products, 1):
            print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {i}/{len(products)}...")
            
            parsed_product = self.parse_product(product, query, category)
            if parsed_product:
                parsed_products.append(parsed_product)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(random.uniform(0.5, 1.5))
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(parsed_products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        saved_count = self.save_products(parsed_products)
        
        print("-" * 50)
        print(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {saved_count}")
        
        return saved_count


class Command(BaseCommand):
    """
    Django management command –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
    """
    help = '–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries'
    
    def add_arguments(self, parser):
        parser.add_argument('query', type=str, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
        parser.add_argument('--category', type=str, help='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤')
        parser.add_argument('--limit', type=int, default=100, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤')
    
    def handle(self, *args, **options):
        query = options['query']
        category = options.get('category')
        limit = options.get('limit', 100)
        
        parser = WildberriesParser()
        saved_count = parser.parse_and_save(query, category, limit)
        
        self.stdout.write(
            self.style.SUCCESS(f'–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤')
        ) 