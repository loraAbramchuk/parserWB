import json
import time
from django.core.management.base import BaseCommand
from django.db import transaction
from products.models import Product
import requests
from urllib.parse import quote


class Command(BaseCommand):
    help = '–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å wildberries.by —á–µ—Ä–µ–∑ API'

    def add_arguments(self, parser):
        parser.add_argument('query', type=str, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
        parser.add_argument('--pages', type=int, default=1, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
        parser.add_argument('--category', type=str, help='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤')

    def handle(self, *args, **options):
        query = options['query']
        pages = options['pages']
        category = options['category']

        self.stdout.write(f"–ü–∞—Ä—Å–∏–º wildberries.by: '{query}', —Å—Ç—Ä–∞–Ω–∏—Ü: {pages}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        total_products = 0
        saved_products = 0

        for page in range(1, pages + 1):
            self.stdout.write(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º API wildberries –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
                products = self.get_products_from_api(query, page)
                
                if products:
                    self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    page_saved = self.save_products(products, query)
                    saved_products += page_saved
                    total_products += len(products)
                    
                    self.stdout.write(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {page_saved} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                else:
                    self.stdout.write(f"‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {str(e)}")
                continue

        self.stdout.write(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        self.stdout.write(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {saved_products}")

    def get_products_from_api(self, query, page):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ API wildberries"""
        try:
            # URL –¥–ª—è API –ø–æ–∏—Å–∫–∞ wildberries
            search_url = "https://search.wb.ru/exactmatch/ru/common/v4/search"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'query': query,
                'appType': '1',
                'curr': 'byn',
                'dest': '-59208',
                'lang': 'ru',
                'page': page,
                'reg': '0',
                'regions': '80,83,4,64,38,40,33,70,82,69,86,30,85,22,66,31,48,1,68',
                'resultset': 'catalog',
                'sort': 'popular',
                'spp': '0',
                'suppressSpellcheck': 'false',
            }
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Referer': 'https://www.wildberries.by/',
                'Sec-Fetch-Dest': 'empty',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-site',
            }
            
            response = requests.get(search_url, params=params, headers=headers, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            self.stdout.write(f"üîç –û—Ç–≤–µ—Ç API: {data}")
            
            if 'data' in data and 'products' in data['data']:
                return data['data']['products']
            else:
                self.stdout.write(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {data.keys()}")
                if 'error' in data:
                    self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ API: {data['error']}")
                if 'code' in data:
                    self.stdout.write(f"‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: {data['code']}")
                return []
                
        except requests.exceptions.RequestException as e:
            self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {str(e)}")
            return []
        except json.JSONDecodeError as e:
            self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
            return []
        except Exception as e:
            self.stdout.write(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return []

    def save_products(self, products, search_query):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        saved_count = 0
        
        with transaction.atomic():
            for product_data in products:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
                    name = product_data.get('name', '')
                    price = product_data.get('salePriceU', 0) / 100  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                    original_price = product_data.get('priceU', 0) / 100
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                    rating = product_data.get('rating', 0)
                    review_count = (
                        product_data.get('reviewCount') or
                        product_data.get('feedbacks') or
                        product_data.get('nmFeedbacks') or
                        0
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
                    product_id = product_data.get('id', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID
                    if Product.objects.filter(wb_id=product_id).exists():
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    product = Product.objects.create(
                        wb_id=product_id,
                        name=name,
                        price=price,
                        original_price=original_price,
                        rating=rating,
                        review_count=review_count,
                        search_query=search_query
                    )
                    
                    saved_count += 1
                    
                except Exception as e:
                    self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}")
                    continue
        
        return saved_count 